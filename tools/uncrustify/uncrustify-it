#!/bin/bash

script_name="uncrustify-it"

usage() {
    echo "Usage: $script_name (format | check | help)"
}

help() {
    echo "Simple wrapper for uncrustify that provide most useful functions."
    echo ""
    echo "Usage: $script_name (format | check | help)"
    echo ""
    echo "format - format whole project accordingly to the uncrustify.cfg config file."
    echo "check  - check if the whole project is formated properly."
    echo "help   - show this help information set."
    echo ""
}

die() {
    echo >&2 "$script_name: $@"
    exit 1
}

# get c/cpp source files from given directory
get_source_files() {
    local result=$(find $1 -regextype posix-extended -iregex "$1/(src|include).*(\.c|\.h|\.cpp|\.hpp|\.cc)")
    [[ $(echo $result | wc -w) > 0 ]] || die "Cannot to find any file to check."
    echo $result
}

main() {
    # input validation and locals set
    [[ "$#" == 1 ]] || ! usage || die "Choose subcommand."
    local subcommand=$1
    local files=("$(get_source_files $ABRUSLIB_ROOT)")

    case $subcommand in
        format)
            uncrustify -c $ABRUSLIB_ROOT/tools/uncrustify/uncrustify.cfg --no-backup $files
            [[ $? == 0 ]] || die "Something went wrong."
            ;;

        check)
            uncrustify -c $ABRUSLIB_ROOT/tools/uncrustify/uncrustify.cfg --check $files
            [[ $? == 0 ]] || die "Files doesn't meet requrements."
            ;;

        help)
            help
            ;;
        
        *)
            usage
            die "Wrong argument. Check subcommand list."
    esac
}

# main function call
main $@
